@page
@model NightScoutReporterFD.Pages.DailyReportModel
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>DailyReport</title>
    <script src="../lib/Chart.js/Chart.bundle.js"></script>
    <script src="../lib/utils.js"></script>
    <style type="text/css">
        body {
        margin: 0;
        padding: 0;
        font: 12pt "Tahoma";
    }
    table {
        border-collapse: collapse;
        width: 100%;
    }
    td, th {
        border: 1px solid black;
        padding: 1px;
    }
    tr:nth-child(even) {
        background-color: #dddddd;
    }
    * {
        box-sizing: border-box;
        -moz-box-sizing: border-box;
    }
    .page {
        width: 21cm;
        min-height: 29.7cm;
        padding: 0cm;
    }
    .subpage {
        height: 256mm;
    }
    </style>
    <style>
        canvas {
            -moz-user-select: none;
            -webkit-user-select: none;
            -ms-user-select: none;
        }
    </style>
</head>
<body>
    <div class="book">
        <div class="page">
            <div class="subpage">
                <h1 style="font-size: large">Protokoll vom @this.Model.DayQueryParameter</h1>
                <div style="width:100%; height: 9cm">
                    <canvas id="canvasGlucose"></canvas>
                </div>
                <br>
                <div style="width:100%; height: 6cm">
                    <canvas id="canvasBasalRate"></canvas>
                </div>
                <br>
                <div style="width:100%;">
                    <p>@this.Model.Meals</p>
                </div>
                <br>
                <div style="width:100%;">
                    <p>@this.Model.DailySummary</p>
                </div>
                <script>
        var sgvs = [@this.Model.SerumGlucoseValues];
        var mbgvs = [@this.Model.MeterBloodGlucoseValues];
        var criticalLows = Array(12 * 24).fill(@NightScoutReporterFD.Pages.DailyReportModel.CriticalLow);
        var criticalHighs = Array(12 * 24).fill(@this.Model.CriticalHigh);
        var warningLows = Array(12 * 24).fill(@NightScoutReporterFD.Pages.DailyReportModel.WarningLow);
        var warningHighs = Array(12 * 24).fill(@this.Model.WarningHigh);
        var inTargets = Array(12 * 24).fill(@NightScoutReporterFD.Pages.DailyReportModel.InTarget);
        var targetBasalRates = [@this.Model.TargetBasalRates];
        var actualBasalRates = [@this.Model.ActualBasalRates];
        var glucoseConfig = {
            type: 'line',
            data: {
                labels: [@this.Model.TimeLineLabels5M],
                datasets: [ {
                    label: 'CriticalLow',
                    data: criticalLows,
                    borderColor: 'rgba(255, 0, 0, 0.2)',
                    borderWidth: 0,
                    backgroundColor: 'rgba(255, 0, 0, 0.2)',
                    pointRadius: 0,
                    fill: "origin",
                    pointStyle: "line"
                }, {
                    label: 'WarningLows',
                    data: warningLows,
                    borderColor: 'rgba(255,255,0,0.2)',
                    borderWidth: 0,
                    backgroundColor: 'rgba(255,255,0,0.2)',
                    pointRadius: 0,
                    fill: "-1",
                    pointStyle: "line"
                }, {
                    label: 'all good',
                    data: inTargets,
                    borderColor: 'rgba(0,255,0,0.2)',
                    borderWidth: 0,
                    backgroundColor: 'rgba(0,255,0,0.2)',
                    pointRadius: 0,
                    fill: "-1",
                    pointStyle: "line"
                }, {
                    label: 'WarningHighs',
                    data: warningHighs,
                    borderColor: 'rgba(255,255,0,0.2)',
                    borderWidth: 0,
                    backgroundColor: 'rgba(255,255,0,0.2)',
                    pointRadius: 0,
                    fill: "-1",
                    pointStyle: "line"
                }, {
                    label: 'CriticalHighs',
                    data: criticalHighs,
                    borderColor: 'rgba(255, 0, 0, 0.2)',
                    borderWidth: 0,
                    backgroundColor: 'rgba(255, 0, 0, 0.2)',
                    pointRadius: 0,
                    fill: "-1",
                    pointStyle: "line"
                }, {
                    label: 'CGM',
                    data: sgvs,
                    borderColor: 'rgba(0, 0, 0, 1)',
                    pointBorderColor: 'rgba(0, 0, 0, 1)',
                    pointBackgroundColor: 'rgba(0, 0, 0, 1)',
                    backgroundColor: 'rgba(0, 0, 0, 0)',
                    pointRadius: 2,
                    pointStyle: 'point',
                    fill: false,
                    cubicInterpolationMode: 'monotone',
                    spanGaps: false,
                }, {
                    label: 'Messgerät',
                    data: mbgvs,
                    borderColor: 'rgba(0, 0, 255, 1)',
                    backgroundColor: 'rgba(0, 0, 0, 0)',
                    pointStyle: 'triangle',
                    pointBackgroundColor: 'rgba(0, 0, 255, 1)',
                    pointRadius: 5,
                    fill: false,
                    spanGaps: false,
                }]
            },
            options: {
                maintainAspectRatio: false,
                responsive: true,
                title: {
                    display: false,
                    text: 'BZ Werte @this.Model.DayQueryParameter'
                },
                tooltips: {
                    mode: 'index'
                },
                legend: {
                    labels: {
                        filter: function (chart, legendItem) {
                            if (chart.datasetIndex > 4) {
                                return legendItem;
                            }

                            return null;
                        }
                    },
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: false,
                            labelString: 'Uhrzeit'
                        },
                        type: 'category',
                        ticks: {
                            autoSkip: false,
                            callback: function (label, index, labels) {
                                if (index % 12 == 0) {
                                    return label;
                                }

                                return null;
                            }
                        },
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'BZ Werte vom @this.Model.DayQueryParameter in mg/dl',
                        },
                        ticks: {
                            suggestedMin: 0,
                            suggestedMax: [@this.Model.SuggestedMaxGlucoseValue],
                        }
                    }]
                }
            }
        };

        var basalRateConfig = {
            type: 'line',
            data: {
                labels: [@this.Model.TimeLineLabels1M],
                datasets: [ {
                    label: 'Geplante Basalrate',
                    data: targetBasalRates,
                    borderColor: 'rgba(0, 0, 0, 1)',
                    borderDash: [3, 3],
                    pointBorderColor: 'rgba(0, 0, 0, 1)',
                    pointBackgroundColor: 'rgba(0, 0, 0, 1)',
                    backgroundColor: 'rgba(0, 0, 0, 0)',
                    pointRadius: 0,
                    pointStyle: 'point',
                    fill: false,
                    cubicInterpolationMode: 'monotone'
                }, {
                    label: 'Aktuelle Basalrate',
                    data: actualBasalRates,
                    borderColor: 'rgba(0, 0, 255, 1)',
                    backgroundColor: 'rgba(0, 0, 0, 0)',
                    pointStyle: 'point',
                    pointBackgroundColor: 'rgba(0, 0, 255, 1)',
                    pointRadius: 0,
                    fill: false,
                }]
            },
            options: {
                maintainAspectRatio: false,
                responsive: true,
                title: {
                    display: false,
                    text: 'Basalrate @this.Model.DayQueryParameter'
                },
                tooltips: {
                    mode: 'index'
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: false,
                            labelString: 'Uhrzeit'
                        },
                        type: 'category',
                        ticks: {
                            autoSkip: false,
                            callback: function (label, index, labels) {
                                if (index % 60 == 0) {
                                    return label;
                                }

                                return null;
                            }
                        },
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Basalrate vom @this.Model.DayQueryParameter in IE/h'
                        },
                        ticks: {
                            suggestedMin: 0,
                            suggestedMax: @this.Model.SuggestedMaxBasalRateValue,
                        }
                    }]
                }
            }
        };

        window.onload = function () {
            var ctx = document.getElementById('canvasGlucose').getContext('2d');
            window.glucoseLineChart = new Chart(ctx, glucoseConfig);

            ctx = document.getElementById('canvasBasalRate').getContext('2d');
            window.basalRateLineChart = new Chart(ctx, basalRateConfig);
        };
                </script>
            </div>
        </div>
    </div>
</body>
</html>
